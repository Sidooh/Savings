// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Savings/ent/job"
	"Savings/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// JobUpdate is the builder for updating Job entities.
type JobUpdate struct {
	config
	hooks    []Hook
	mutation *JobMutation
}

// Where appends a list predicates to the JobUpdate builder.
func (ju *JobUpdate) Where(ps ...predicate.Job) *JobUpdate {
	ju.mutation.Where(ps...)
	return ju
}

// SetUpdatedAt sets the "updated_at" field.
func (ju *JobUpdate) SetUpdatedAt(t time.Time) *JobUpdate {
	ju.mutation.SetUpdatedAt(t)
	return ju
}

// SetName sets the "name" field.
func (ju *JobUpdate) SetName(s string) *JobUpdate {
	ju.mutation.SetName(s)
	return ju
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ju *JobUpdate) SetNillableName(s *string) *JobUpdate {
	if s != nil {
		ju.SetName(*s)
	}
	return ju
}

// SetDate sets the "date" field.
func (ju *JobUpdate) SetDate(s string) *JobUpdate {
	ju.mutation.SetDate(s)
	return ju
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ju *JobUpdate) SetNillableDate(s *string) *JobUpdate {
	if s != nil {
		ju.SetDate(*s)
	}
	return ju
}

// SetStatus sets the "status" field.
func (ju *JobUpdate) SetStatus(s string) *JobUpdate {
	ju.mutation.SetStatus(s)
	return ju
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ju *JobUpdate) SetNillableStatus(s *string) *JobUpdate {
	if s != nil {
		ju.SetStatus(*s)
	}
	return ju
}

// SetBatch sets the "batch" field.
func (ju *JobUpdate) SetBatch(i int) *JobUpdate {
	ju.mutation.ResetBatch()
	ju.mutation.SetBatch(i)
	return ju
}

// SetNillableBatch sets the "batch" field if the given value is not nil.
func (ju *JobUpdate) SetNillableBatch(i *int) *JobUpdate {
	if i != nil {
		ju.SetBatch(*i)
	}
	return ju
}

// AddBatch adds i to the "batch" field.
func (ju *JobUpdate) AddBatch(i int) *JobUpdate {
	ju.mutation.AddBatch(i)
	return ju
}

// SetLastProcessedID sets the "last_processed_id" field.
func (ju *JobUpdate) SetLastProcessedID(u uint64) *JobUpdate {
	ju.mutation.ResetLastProcessedID()
	ju.mutation.SetLastProcessedID(u)
	return ju
}

// SetNillableLastProcessedID sets the "last_processed_id" field if the given value is not nil.
func (ju *JobUpdate) SetNillableLastProcessedID(u *uint64) *JobUpdate {
	if u != nil {
		ju.SetLastProcessedID(*u)
	}
	return ju
}

// AddLastProcessedID adds u to the "last_processed_id" field.
func (ju *JobUpdate) AddLastProcessedID(u int64) *JobUpdate {
	ju.mutation.AddLastProcessedID(u)
	return ju
}

// SetTotalProcessed sets the "total_processed" field.
func (ju *JobUpdate) SetTotalProcessed(u uint) *JobUpdate {
	ju.mutation.ResetTotalProcessed()
	ju.mutation.SetTotalProcessed(u)
	return ju
}

// SetNillableTotalProcessed sets the "total_processed" field if the given value is not nil.
func (ju *JobUpdate) SetNillableTotalProcessed(u *uint) *JobUpdate {
	if u != nil {
		ju.SetTotalProcessed(*u)
	}
	return ju
}

// AddTotalProcessed adds u to the "total_processed" field.
func (ju *JobUpdate) AddTotalProcessed(u int) *JobUpdate {
	ju.mutation.AddTotalProcessed(u)
	return ju
}

// SetData sets the "data" field.
func (ju *JobUpdate) SetData(m map[string]interface{}) *JobUpdate {
	ju.mutation.SetData(m)
	return ju
}

// Mutation returns the JobMutation object of the builder.
func (ju *JobUpdate) Mutation() *JobMutation {
	return ju.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ju *JobUpdate) Save(ctx context.Context) (int, error) {
	ju.defaults()
	return withHooks(ctx, ju.sqlSave, ju.mutation, ju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JobUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JobUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JobUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ju *JobUpdate) defaults() {
	if _, ok := ju.mutation.UpdatedAt(); !ok {
		v := job.UpdateDefaultUpdatedAt()
		ju.mutation.SetUpdatedAt(v)
	}
}

func (ju *JobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeUint64))
	if ps := ju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.UpdatedAt(); ok {
		_spec.SetField(job.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ju.mutation.Name(); ok {
		_spec.SetField(job.FieldName, field.TypeString, value)
	}
	if value, ok := ju.mutation.Date(); ok {
		_spec.SetField(job.FieldDate, field.TypeString, value)
	}
	if value, ok := ju.mutation.Status(); ok {
		_spec.SetField(job.FieldStatus, field.TypeString, value)
	}
	if value, ok := ju.mutation.Batch(); ok {
		_spec.SetField(job.FieldBatch, field.TypeInt, value)
	}
	if value, ok := ju.mutation.AddedBatch(); ok {
		_spec.AddField(job.FieldBatch, field.TypeInt, value)
	}
	if value, ok := ju.mutation.LastProcessedID(); ok {
		_spec.SetField(job.FieldLastProcessedID, field.TypeUint64, value)
	}
	if value, ok := ju.mutation.AddedLastProcessedID(); ok {
		_spec.AddField(job.FieldLastProcessedID, field.TypeUint64, value)
	}
	if value, ok := ju.mutation.TotalProcessed(); ok {
		_spec.SetField(job.FieldTotalProcessed, field.TypeUint, value)
	}
	if value, ok := ju.mutation.AddedTotalProcessed(); ok {
		_spec.AddField(job.FieldTotalProcessed, field.TypeUint, value)
	}
	if value, ok := ju.mutation.Data(); ok {
		_spec.SetField(job.FieldData, field.TypeJSON, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ju.mutation.done = true
	return n, nil
}

// JobUpdateOne is the builder for updating a single Job entity.
type JobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (juo *JobUpdateOne) SetUpdatedAt(t time.Time) *JobUpdateOne {
	juo.mutation.SetUpdatedAt(t)
	return juo
}

// SetName sets the "name" field.
func (juo *JobUpdateOne) SetName(s string) *JobUpdateOne {
	juo.mutation.SetName(s)
	return juo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableName(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetName(*s)
	}
	return juo
}

// SetDate sets the "date" field.
func (juo *JobUpdateOne) SetDate(s string) *JobUpdateOne {
	juo.mutation.SetDate(s)
	return juo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableDate(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetDate(*s)
	}
	return juo
}

// SetStatus sets the "status" field.
func (juo *JobUpdateOne) SetStatus(s string) *JobUpdateOne {
	juo.mutation.SetStatus(s)
	return juo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableStatus(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetStatus(*s)
	}
	return juo
}

// SetBatch sets the "batch" field.
func (juo *JobUpdateOne) SetBatch(i int) *JobUpdateOne {
	juo.mutation.ResetBatch()
	juo.mutation.SetBatch(i)
	return juo
}

// SetNillableBatch sets the "batch" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableBatch(i *int) *JobUpdateOne {
	if i != nil {
		juo.SetBatch(*i)
	}
	return juo
}

// AddBatch adds i to the "batch" field.
func (juo *JobUpdateOne) AddBatch(i int) *JobUpdateOne {
	juo.mutation.AddBatch(i)
	return juo
}

// SetLastProcessedID sets the "last_processed_id" field.
func (juo *JobUpdateOne) SetLastProcessedID(u uint64) *JobUpdateOne {
	juo.mutation.ResetLastProcessedID()
	juo.mutation.SetLastProcessedID(u)
	return juo
}

// SetNillableLastProcessedID sets the "last_processed_id" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableLastProcessedID(u *uint64) *JobUpdateOne {
	if u != nil {
		juo.SetLastProcessedID(*u)
	}
	return juo
}

// AddLastProcessedID adds u to the "last_processed_id" field.
func (juo *JobUpdateOne) AddLastProcessedID(u int64) *JobUpdateOne {
	juo.mutation.AddLastProcessedID(u)
	return juo
}

// SetTotalProcessed sets the "total_processed" field.
func (juo *JobUpdateOne) SetTotalProcessed(u uint) *JobUpdateOne {
	juo.mutation.ResetTotalProcessed()
	juo.mutation.SetTotalProcessed(u)
	return juo
}

// SetNillableTotalProcessed sets the "total_processed" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableTotalProcessed(u *uint) *JobUpdateOne {
	if u != nil {
		juo.SetTotalProcessed(*u)
	}
	return juo
}

// AddTotalProcessed adds u to the "total_processed" field.
func (juo *JobUpdateOne) AddTotalProcessed(u int) *JobUpdateOne {
	juo.mutation.AddTotalProcessed(u)
	return juo
}

// SetData sets the "data" field.
func (juo *JobUpdateOne) SetData(m map[string]interface{}) *JobUpdateOne {
	juo.mutation.SetData(m)
	return juo
}

// Mutation returns the JobMutation object of the builder.
func (juo *JobUpdateOne) Mutation() *JobMutation {
	return juo.mutation
}

// Where appends a list predicates to the JobUpdate builder.
func (juo *JobUpdateOne) Where(ps ...predicate.Job) *JobUpdateOne {
	juo.mutation.Where(ps...)
	return juo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (juo *JobUpdateOne) Select(field string, fields ...string) *JobUpdateOne {
	juo.fields = append([]string{field}, fields...)
	return juo
}

// Save executes the query and returns the updated Job entity.
func (juo *JobUpdateOne) Save(ctx context.Context) (*Job, error) {
	juo.defaults()
	return withHooks(ctx, juo.sqlSave, juo.mutation, juo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JobUpdateOne) SaveX(ctx context.Context) *Job {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JobUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JobUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (juo *JobUpdateOne) defaults() {
	if _, ok := juo.mutation.UpdatedAt(); !ok {
		v := job.UpdateDefaultUpdatedAt()
		juo.mutation.SetUpdatedAt(v)
	}
}

func (juo *JobUpdateOne) sqlSave(ctx context.Context) (_node *Job, err error) {
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeUint64))
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Job.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := juo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, job.FieldID)
		for _, f := range fields {
			if !job.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != job.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := juo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := juo.mutation.UpdatedAt(); ok {
		_spec.SetField(job.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := juo.mutation.Name(); ok {
		_spec.SetField(job.FieldName, field.TypeString, value)
	}
	if value, ok := juo.mutation.Date(); ok {
		_spec.SetField(job.FieldDate, field.TypeString, value)
	}
	if value, ok := juo.mutation.Status(); ok {
		_spec.SetField(job.FieldStatus, field.TypeString, value)
	}
	if value, ok := juo.mutation.Batch(); ok {
		_spec.SetField(job.FieldBatch, field.TypeInt, value)
	}
	if value, ok := juo.mutation.AddedBatch(); ok {
		_spec.AddField(job.FieldBatch, field.TypeInt, value)
	}
	if value, ok := juo.mutation.LastProcessedID(); ok {
		_spec.SetField(job.FieldLastProcessedID, field.TypeUint64, value)
	}
	if value, ok := juo.mutation.AddedLastProcessedID(); ok {
		_spec.AddField(job.FieldLastProcessedID, field.TypeUint64, value)
	}
	if value, ok := juo.mutation.TotalProcessed(); ok {
		_spec.SetField(job.FieldTotalProcessed, field.TypeUint, value)
	}
	if value, ok := juo.mutation.AddedTotalProcessed(); ok {
		_spec.AddField(job.FieldTotalProcessed, field.TypeUint, value)
	}
	if value, ok := juo.mutation.Data(); ok {
		_spec.SetField(job.FieldData, field.TypeJSON, value)
	}
	_node = &Job{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	juo.mutation.done = true
	return _node, nil
}
