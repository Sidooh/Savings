// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Savings/ent/personalaccount"
	"Savings/ent/personalaccounttransaction"
	"Savings/ent/predicate"
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PersonalAccountTransactionQuery is the builder for querying PersonalAccountTransaction entities.
type PersonalAccountTransactionQuery struct {
	config
	ctx         *QueryContext
	order       []personalaccounttransaction.OrderOption
	inters      []Interceptor
	predicates  []predicate.PersonalAccountTransaction
	withAccount *PersonalAccountQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PersonalAccountTransactionQuery builder.
func (patq *PersonalAccountTransactionQuery) Where(ps ...predicate.PersonalAccountTransaction) *PersonalAccountTransactionQuery {
	patq.predicates = append(patq.predicates, ps...)
	return patq
}

// Limit the number of records to be returned by this query.
func (patq *PersonalAccountTransactionQuery) Limit(limit int) *PersonalAccountTransactionQuery {
	patq.ctx.Limit = &limit
	return patq
}

// Offset to start from.
func (patq *PersonalAccountTransactionQuery) Offset(offset int) *PersonalAccountTransactionQuery {
	patq.ctx.Offset = &offset
	return patq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (patq *PersonalAccountTransactionQuery) Unique(unique bool) *PersonalAccountTransactionQuery {
	patq.ctx.Unique = &unique
	return patq
}

// Order specifies how the records should be ordered.
func (patq *PersonalAccountTransactionQuery) Order(o ...personalaccounttransaction.OrderOption) *PersonalAccountTransactionQuery {
	patq.order = append(patq.order, o...)
	return patq
}

// QueryAccount chains the current query on the "account" edge.
func (patq *PersonalAccountTransactionQuery) QueryAccount() *PersonalAccountQuery {
	query := (&PersonalAccountClient{config: patq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := patq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := patq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(personalaccounttransaction.Table, personalaccounttransaction.FieldID, selector),
			sqlgraph.To(personalaccount.Table, personalaccount.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, personalaccounttransaction.AccountTable, personalaccounttransaction.AccountColumn),
		)
		fromU = sqlgraph.SetNeighbors(patq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PersonalAccountTransaction entity from the query.
// Returns a *NotFoundError when no PersonalAccountTransaction was found.
func (patq *PersonalAccountTransactionQuery) First(ctx context.Context) (*PersonalAccountTransaction, error) {
	nodes, err := patq.Limit(1).All(setContextOp(ctx, patq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{personalaccounttransaction.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (patq *PersonalAccountTransactionQuery) FirstX(ctx context.Context) *PersonalAccountTransaction {
	node, err := patq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PersonalAccountTransaction ID from the query.
// Returns a *NotFoundError when no PersonalAccountTransaction ID was found.
func (patq *PersonalAccountTransactionQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = patq.Limit(1).IDs(setContextOp(ctx, patq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{personalaccounttransaction.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (patq *PersonalAccountTransactionQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := patq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PersonalAccountTransaction entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PersonalAccountTransaction entity is found.
// Returns a *NotFoundError when no PersonalAccountTransaction entities are found.
func (patq *PersonalAccountTransactionQuery) Only(ctx context.Context) (*PersonalAccountTransaction, error) {
	nodes, err := patq.Limit(2).All(setContextOp(ctx, patq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{personalaccounttransaction.Label}
	default:
		return nil, &NotSingularError{personalaccounttransaction.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (patq *PersonalAccountTransactionQuery) OnlyX(ctx context.Context) *PersonalAccountTransaction {
	node, err := patq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PersonalAccountTransaction ID in the query.
// Returns a *NotSingularError when more than one PersonalAccountTransaction ID is found.
// Returns a *NotFoundError when no entities are found.
func (patq *PersonalAccountTransactionQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = patq.Limit(2).IDs(setContextOp(ctx, patq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{personalaccounttransaction.Label}
	default:
		err = &NotSingularError{personalaccounttransaction.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (patq *PersonalAccountTransactionQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := patq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PersonalAccountTransactions.
func (patq *PersonalAccountTransactionQuery) All(ctx context.Context) ([]*PersonalAccountTransaction, error) {
	ctx = setContextOp(ctx, patq.ctx, "All")
	if err := patq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PersonalAccountTransaction, *PersonalAccountTransactionQuery]()
	return withInterceptors[[]*PersonalAccountTransaction](ctx, patq, qr, patq.inters)
}

// AllX is like All, but panics if an error occurs.
func (patq *PersonalAccountTransactionQuery) AllX(ctx context.Context) []*PersonalAccountTransaction {
	nodes, err := patq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PersonalAccountTransaction IDs.
func (patq *PersonalAccountTransactionQuery) IDs(ctx context.Context) (ids []uint64, err error) {
	if patq.ctx.Unique == nil && patq.path != nil {
		patq.Unique(true)
	}
	ctx = setContextOp(ctx, patq.ctx, "IDs")
	if err = patq.Select(personalaccounttransaction.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (patq *PersonalAccountTransactionQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := patq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (patq *PersonalAccountTransactionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, patq.ctx, "Count")
	if err := patq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, patq, querierCount[*PersonalAccountTransactionQuery](), patq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (patq *PersonalAccountTransactionQuery) CountX(ctx context.Context) int {
	count, err := patq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (patq *PersonalAccountTransactionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, patq.ctx, "Exist")
	switch _, err := patq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (patq *PersonalAccountTransactionQuery) ExistX(ctx context.Context) bool {
	exist, err := patq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PersonalAccountTransactionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (patq *PersonalAccountTransactionQuery) Clone() *PersonalAccountTransactionQuery {
	if patq == nil {
		return nil
	}
	return &PersonalAccountTransactionQuery{
		config:      patq.config,
		ctx:         patq.ctx.Clone(),
		order:       append([]personalaccounttransaction.OrderOption{}, patq.order...),
		inters:      append([]Interceptor{}, patq.inters...),
		predicates:  append([]predicate.PersonalAccountTransaction{}, patq.predicates...),
		withAccount: patq.withAccount.Clone(),
		// clone intermediate query.
		sql:  patq.sql.Clone(),
		path: patq.path,
	}
}

// WithAccount tells the query-builder to eager-load the nodes that are connected to
// the "account" edge. The optional arguments are used to configure the query builder of the edge.
func (patq *PersonalAccountTransactionQuery) WithAccount(opts ...func(*PersonalAccountQuery)) *PersonalAccountTransactionQuery {
	query := (&PersonalAccountClient{config: patq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	patq.withAccount = query
	return patq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PersonalAccountTransaction.Query().
//		GroupBy(personalaccounttransaction.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (patq *PersonalAccountTransactionQuery) GroupBy(field string, fields ...string) *PersonalAccountTransactionGroupBy {
	patq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PersonalAccountTransactionGroupBy{build: patq}
	grbuild.flds = &patq.ctx.Fields
	grbuild.label = personalaccounttransaction.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.PersonalAccountTransaction.Query().
//		Select(personalaccounttransaction.FieldCreatedAt).
//		Scan(ctx, &v)
func (patq *PersonalAccountTransactionQuery) Select(fields ...string) *PersonalAccountTransactionSelect {
	patq.ctx.Fields = append(patq.ctx.Fields, fields...)
	sbuild := &PersonalAccountTransactionSelect{PersonalAccountTransactionQuery: patq}
	sbuild.label = personalaccounttransaction.Label
	sbuild.flds, sbuild.scan = &patq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PersonalAccountTransactionSelect configured with the given aggregations.
func (patq *PersonalAccountTransactionQuery) Aggregate(fns ...AggregateFunc) *PersonalAccountTransactionSelect {
	return patq.Select().Aggregate(fns...)
}

func (patq *PersonalAccountTransactionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range patq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, patq); err != nil {
				return err
			}
		}
	}
	for _, f := range patq.ctx.Fields {
		if !personalaccounttransaction.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if patq.path != nil {
		prev, err := patq.path(ctx)
		if err != nil {
			return err
		}
		patq.sql = prev
	}
	return nil
}

func (patq *PersonalAccountTransactionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PersonalAccountTransaction, error) {
	var (
		nodes       = []*PersonalAccountTransaction{}
		_spec       = patq.querySpec()
		loadedTypes = [1]bool{
			patq.withAccount != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PersonalAccountTransaction).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PersonalAccountTransaction{config: patq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, patq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := patq.withAccount; query != nil {
		if err := patq.loadAccount(ctx, query, nodes, nil,
			func(n *PersonalAccountTransaction, e *PersonalAccount) { n.Edges.Account = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (patq *PersonalAccountTransactionQuery) loadAccount(ctx context.Context, query *PersonalAccountQuery, nodes []*PersonalAccountTransaction, init func(*PersonalAccountTransaction), assign func(*PersonalAccountTransaction, *PersonalAccount)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*PersonalAccountTransaction)
	for i := range nodes {
		fk := nodes[i].PersonalAccountID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(personalaccount.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "personal_account_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (patq *PersonalAccountTransactionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := patq.querySpec()
	_spec.Node.Columns = patq.ctx.Fields
	if len(patq.ctx.Fields) > 0 {
		_spec.Unique = patq.ctx.Unique != nil && *patq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, patq.driver, _spec)
}

func (patq *PersonalAccountTransactionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(personalaccounttransaction.Table, personalaccounttransaction.Columns, sqlgraph.NewFieldSpec(personalaccounttransaction.FieldID, field.TypeUint64))
	_spec.From = patq.sql
	if unique := patq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if patq.path != nil {
		_spec.Unique = true
	}
	if fields := patq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, personalaccounttransaction.FieldID)
		for i := range fields {
			if fields[i] != personalaccounttransaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if patq.withAccount != nil {
			_spec.Node.AddColumnOnce(personalaccounttransaction.FieldPersonalAccountID)
		}
	}
	if ps := patq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := patq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := patq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := patq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (patq *PersonalAccountTransactionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(patq.driver.Dialect())
	t1 := builder.Table(personalaccounttransaction.Table)
	columns := patq.ctx.Fields
	if len(columns) == 0 {
		columns = personalaccounttransaction.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if patq.sql != nil {
		selector = patq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if patq.ctx.Unique != nil && *patq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range patq.predicates {
		p(selector)
	}
	for _, p := range patq.order {
		p(selector)
	}
	if offset := patq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := patq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PersonalAccountTransactionGroupBy is the group-by builder for PersonalAccountTransaction entities.
type PersonalAccountTransactionGroupBy struct {
	selector
	build *PersonalAccountTransactionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (patgb *PersonalAccountTransactionGroupBy) Aggregate(fns ...AggregateFunc) *PersonalAccountTransactionGroupBy {
	patgb.fns = append(patgb.fns, fns...)
	return patgb
}

// Scan applies the selector query and scans the result into the given value.
func (patgb *PersonalAccountTransactionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, patgb.build.ctx, "GroupBy")
	if err := patgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PersonalAccountTransactionQuery, *PersonalAccountTransactionGroupBy](ctx, patgb.build, patgb, patgb.build.inters, v)
}

func (patgb *PersonalAccountTransactionGroupBy) sqlScan(ctx context.Context, root *PersonalAccountTransactionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(patgb.fns))
	for _, fn := range patgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*patgb.flds)+len(patgb.fns))
		for _, f := range *patgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*patgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := patgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PersonalAccountTransactionSelect is the builder for selecting fields of PersonalAccountTransaction entities.
type PersonalAccountTransactionSelect struct {
	*PersonalAccountTransactionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pats *PersonalAccountTransactionSelect) Aggregate(fns ...AggregateFunc) *PersonalAccountTransactionSelect {
	pats.fns = append(pats.fns, fns...)
	return pats
}

// Scan applies the selector query and scans the result into the given value.
func (pats *PersonalAccountTransactionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pats.ctx, "Select")
	if err := pats.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PersonalAccountTransactionQuery, *PersonalAccountTransactionSelect](ctx, pats.PersonalAccountTransactionQuery, pats, pats.inters, v)
}

func (pats *PersonalAccountTransactionSelect) sqlScan(ctx context.Context, root *PersonalAccountTransactionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pats.fns))
	for _, fn := range pats.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pats.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pats.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
