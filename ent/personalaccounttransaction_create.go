// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Savings/ent/personalaccount"
	"Savings/ent/personalaccounttransaction"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PersonalAccountTransactionCreate is the builder for creating a PersonalAccountTransaction entity.
type PersonalAccountTransactionCreate struct {
	config
	mutation *PersonalAccountTransactionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (patc *PersonalAccountTransactionCreate) SetCreatedAt(t time.Time) *PersonalAccountTransactionCreate {
	patc.mutation.SetCreatedAt(t)
	return patc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (patc *PersonalAccountTransactionCreate) SetNillableCreatedAt(t *time.Time) *PersonalAccountTransactionCreate {
	if t != nil {
		patc.SetCreatedAt(*t)
	}
	return patc
}

// SetUpdatedAt sets the "updated_at" field.
func (patc *PersonalAccountTransactionCreate) SetUpdatedAt(t time.Time) *PersonalAccountTransactionCreate {
	patc.mutation.SetUpdatedAt(t)
	return patc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (patc *PersonalAccountTransactionCreate) SetNillableUpdatedAt(t *time.Time) *PersonalAccountTransactionCreate {
	if t != nil {
		patc.SetUpdatedAt(*t)
	}
	return patc
}

// SetPersonalAccountID sets the "personal_account_id" field.
func (patc *PersonalAccountTransactionCreate) SetPersonalAccountID(u uint64) *PersonalAccountTransactionCreate {
	patc.mutation.SetPersonalAccountID(u)
	return patc
}

// SetType sets the "type" field.
func (patc *PersonalAccountTransactionCreate) SetType(s string) *PersonalAccountTransactionCreate {
	patc.mutation.SetType(s)
	return patc
}

// SetAmount sets the "amount" field.
func (patc *PersonalAccountTransactionCreate) SetAmount(f float32) *PersonalAccountTransactionCreate {
	patc.mutation.SetAmount(f)
	return patc
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (patc *PersonalAccountTransactionCreate) SetNillableAmount(f *float32) *PersonalAccountTransactionCreate {
	if f != nil {
		patc.SetAmount(*f)
	}
	return patc
}

// SetBalance sets the "balance" field.
func (patc *PersonalAccountTransactionCreate) SetBalance(f float32) *PersonalAccountTransactionCreate {
	patc.mutation.SetBalance(f)
	return patc
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (patc *PersonalAccountTransactionCreate) SetNillableBalance(f *float32) *PersonalAccountTransactionCreate {
	if f != nil {
		patc.SetBalance(*f)
	}
	return patc
}

// SetStatus sets the "status" field.
func (patc *PersonalAccountTransactionCreate) SetStatus(s string) *PersonalAccountTransactionCreate {
	patc.mutation.SetStatus(s)
	return patc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (patc *PersonalAccountTransactionCreate) SetNillableStatus(s *string) *PersonalAccountTransactionCreate {
	if s != nil {
		patc.SetStatus(*s)
	}
	return patc
}

// SetID sets the "id" field.
func (patc *PersonalAccountTransactionCreate) SetID(u uint64) *PersonalAccountTransactionCreate {
	patc.mutation.SetID(u)
	return patc
}

// SetAccountID sets the "account" edge to the PersonalAccount entity by ID.
func (patc *PersonalAccountTransactionCreate) SetAccountID(id uint64) *PersonalAccountTransactionCreate {
	patc.mutation.SetAccountID(id)
	return patc
}

// SetAccount sets the "account" edge to the PersonalAccount entity.
func (patc *PersonalAccountTransactionCreate) SetAccount(p *PersonalAccount) *PersonalAccountTransactionCreate {
	return patc.SetAccountID(p.ID)
}

// Mutation returns the PersonalAccountTransactionMutation object of the builder.
func (patc *PersonalAccountTransactionCreate) Mutation() *PersonalAccountTransactionMutation {
	return patc.mutation
}

// Save creates the PersonalAccountTransaction in the database.
func (patc *PersonalAccountTransactionCreate) Save(ctx context.Context) (*PersonalAccountTransaction, error) {
	patc.defaults()
	return withHooks(ctx, patc.sqlSave, patc.mutation, patc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (patc *PersonalAccountTransactionCreate) SaveX(ctx context.Context) *PersonalAccountTransaction {
	v, err := patc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (patc *PersonalAccountTransactionCreate) Exec(ctx context.Context) error {
	_, err := patc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (patc *PersonalAccountTransactionCreate) ExecX(ctx context.Context) {
	if err := patc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (patc *PersonalAccountTransactionCreate) defaults() {
	if _, ok := patc.mutation.CreatedAt(); !ok {
		v := personalaccounttransaction.DefaultCreatedAt()
		patc.mutation.SetCreatedAt(v)
	}
	if _, ok := patc.mutation.UpdatedAt(); !ok {
		v := personalaccounttransaction.DefaultUpdatedAt()
		patc.mutation.SetUpdatedAt(v)
	}
	if _, ok := patc.mutation.Amount(); !ok {
		v := personalaccounttransaction.DefaultAmount
		patc.mutation.SetAmount(v)
	}
	if _, ok := patc.mutation.Balance(); !ok {
		v := personalaccounttransaction.DefaultBalance
		patc.mutation.SetBalance(v)
	}
	if _, ok := patc.mutation.Status(); !ok {
		v := personalaccounttransaction.DefaultStatus
		patc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (patc *PersonalAccountTransactionCreate) check() error {
	if _, ok := patc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PersonalAccountTransaction.created_at"`)}
	}
	if _, ok := patc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PersonalAccountTransaction.updated_at"`)}
	}
	if _, ok := patc.mutation.PersonalAccountID(); !ok {
		return &ValidationError{Name: "personal_account_id", err: errors.New(`ent: missing required field "PersonalAccountTransaction.personal_account_id"`)}
	}
	if _, ok := patc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PersonalAccountTransaction.type"`)}
	}
	if v, ok := patc.mutation.GetType(); ok {
		if err := personalaccounttransaction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PersonalAccountTransaction.type": %w`, err)}
		}
	}
	if _, ok := patc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "PersonalAccountTransaction.amount"`)}
	}
	if v, ok := patc.mutation.Amount(); ok {
		if err := personalaccounttransaction.AmountValidator(v); err != nil {
			return &ValidationError{Name: "amount", err: fmt.Errorf(`ent: validator failed for field "PersonalAccountTransaction.amount": %w`, err)}
		}
	}
	if _, ok := patc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "PersonalAccountTransaction.balance"`)}
	}
	if v, ok := patc.mutation.Balance(); ok {
		if err := personalaccounttransaction.BalanceValidator(v); err != nil {
			return &ValidationError{Name: "balance", err: fmt.Errorf(`ent: validator failed for field "PersonalAccountTransaction.balance": %w`, err)}
		}
	}
	if _, ok := patc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "PersonalAccountTransaction.status"`)}
	}
	if _, ok := patc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account", err: errors.New(`ent: missing required edge "PersonalAccountTransaction.account"`)}
	}
	return nil
}

func (patc *PersonalAccountTransactionCreate) sqlSave(ctx context.Context) (*PersonalAccountTransaction, error) {
	if err := patc.check(); err != nil {
		return nil, err
	}
	_node, _spec := patc.createSpec()
	if err := sqlgraph.CreateNode(ctx, patc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	patc.mutation.id = &_node.ID
	patc.mutation.done = true
	return _node, nil
}

func (patc *PersonalAccountTransactionCreate) createSpec() (*PersonalAccountTransaction, *sqlgraph.CreateSpec) {
	var (
		_node = &PersonalAccountTransaction{config: patc.config}
		_spec = sqlgraph.NewCreateSpec(personalaccounttransaction.Table, sqlgraph.NewFieldSpec(personalaccounttransaction.FieldID, field.TypeUint64))
	)
	if id, ok := patc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := patc.mutation.CreatedAt(); ok {
		_spec.SetField(personalaccounttransaction.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := patc.mutation.UpdatedAt(); ok {
		_spec.SetField(personalaccounttransaction.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := patc.mutation.GetType(); ok {
		_spec.SetField(personalaccounttransaction.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := patc.mutation.Amount(); ok {
		_spec.SetField(personalaccounttransaction.FieldAmount, field.TypeFloat32, value)
		_node.Amount = value
	}
	if value, ok := patc.mutation.Balance(); ok {
		_spec.SetField(personalaccounttransaction.FieldBalance, field.TypeFloat32, value)
		_node.Balance = value
	}
	if value, ok := patc.mutation.Status(); ok {
		_spec.SetField(personalaccounttransaction.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if nodes := patc.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalaccounttransaction.AccountTable,
			Columns: []string{personalaccounttransaction.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccount.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PersonalAccountID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PersonalAccountTransactionCreateBulk is the builder for creating many PersonalAccountTransaction entities in bulk.
type PersonalAccountTransactionCreateBulk struct {
	config
	err      error
	builders []*PersonalAccountTransactionCreate
}

// Save creates the PersonalAccountTransaction entities in the database.
func (patcb *PersonalAccountTransactionCreateBulk) Save(ctx context.Context) ([]*PersonalAccountTransaction, error) {
	if patcb.err != nil {
		return nil, patcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(patcb.builders))
	nodes := make([]*PersonalAccountTransaction, len(patcb.builders))
	mutators := make([]Mutator, len(patcb.builders))
	for i := range patcb.builders {
		func(i int, root context.Context) {
			builder := patcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonalAccountTransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, patcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, patcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, patcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (patcb *PersonalAccountTransactionCreateBulk) SaveX(ctx context.Context) []*PersonalAccountTransaction {
	v, err := patcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (patcb *PersonalAccountTransactionCreateBulk) Exec(ctx context.Context) error {
	_, err := patcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (patcb *PersonalAccountTransactionCreateBulk) ExecX(ctx context.Context) {
	if err := patcb.Exec(ctx); err != nil {
		panic(err)
	}
}
