// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Savings/ent/personalaccounttransaction"
	"Savings/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PersonalAccountTransactionDelete is the builder for deleting a PersonalAccountTransaction entity.
type PersonalAccountTransactionDelete struct {
	config
	hooks    []Hook
	mutation *PersonalAccountTransactionMutation
}

// Where appends a list predicates to the PersonalAccountTransactionDelete builder.
func (patd *PersonalAccountTransactionDelete) Where(ps ...predicate.PersonalAccountTransaction) *PersonalAccountTransactionDelete {
	patd.mutation.Where(ps...)
	return patd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (patd *PersonalAccountTransactionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, patd.sqlExec, patd.mutation, patd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (patd *PersonalAccountTransactionDelete) ExecX(ctx context.Context) int {
	n, err := patd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (patd *PersonalAccountTransactionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(personalaccounttransaction.Table, sqlgraph.NewFieldSpec(personalaccounttransaction.FieldID, field.TypeUint64))
	if ps := patd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, patd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	patd.mutation.done = true
	return affected, err
}

// PersonalAccountTransactionDeleteOne is the builder for deleting a single PersonalAccountTransaction entity.
type PersonalAccountTransactionDeleteOne struct {
	patd *PersonalAccountTransactionDelete
}

// Where appends a list predicates to the PersonalAccountTransactionDelete builder.
func (patdo *PersonalAccountTransactionDeleteOne) Where(ps ...predicate.PersonalAccountTransaction) *PersonalAccountTransactionDeleteOne {
	patdo.patd.mutation.Where(ps...)
	return patdo
}

// Exec executes the deletion query.
func (patdo *PersonalAccountTransactionDeleteOne) Exec(ctx context.Context) error {
	n, err := patdo.patd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{personalaccounttransaction.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (patdo *PersonalAccountTransactionDeleteOne) ExecX(ctx context.Context) {
	if err := patdo.Exec(ctx); err != nil {
		panic(err)
	}
}
