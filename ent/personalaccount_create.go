// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Savings/ent/personalaccount"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PersonalAccountCreate is the builder for creating a PersonalAccount entity.
type PersonalAccountCreate struct {
	config
	mutation *PersonalAccountMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pac *PersonalAccountCreate) SetCreatedAt(t time.Time) *PersonalAccountCreate {
	pac.mutation.SetCreatedAt(t)
	return pac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pac *PersonalAccountCreate) SetNillableCreatedAt(t *time.Time) *PersonalAccountCreate {
	if t != nil {
		pac.SetCreatedAt(*t)
	}
	return pac
}

// SetUpdatedAt sets the "updated_at" field.
func (pac *PersonalAccountCreate) SetUpdatedAt(t time.Time) *PersonalAccountCreate {
	pac.mutation.SetUpdatedAt(t)
	return pac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pac *PersonalAccountCreate) SetNillableUpdatedAt(t *time.Time) *PersonalAccountCreate {
	if t != nil {
		pac.SetUpdatedAt(*t)
	}
	return pac
}

// SetAccountID sets the "account_id" field.
func (pac *PersonalAccountCreate) SetAccountID(u uint64) *PersonalAccountCreate {
	pac.mutation.SetAccountID(u)
	return pac
}

// SetType sets the "type" field.
func (pac *PersonalAccountCreate) SetType(s string) *PersonalAccountCreate {
	pac.mutation.SetType(s)
	return pac
}

// SetBalance sets the "balance" field.
func (pac *PersonalAccountCreate) SetBalance(f float32) *PersonalAccountCreate {
	pac.mutation.SetBalance(f)
	return pac
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (pac *PersonalAccountCreate) SetNillableBalance(f *float32) *PersonalAccountCreate {
	if f != nil {
		pac.SetBalance(*f)
	}
	return pac
}

// SetInterest sets the "interest" field.
func (pac *PersonalAccountCreate) SetInterest(f float32) *PersonalAccountCreate {
	pac.mutation.SetInterest(f)
	return pac
}

// SetNillableInterest sets the "interest" field if the given value is not nil.
func (pac *PersonalAccountCreate) SetNillableInterest(f *float32) *PersonalAccountCreate {
	if f != nil {
		pac.SetInterest(*f)
	}
	return pac
}

// SetID sets the "id" field.
func (pac *PersonalAccountCreate) SetID(u uint64) *PersonalAccountCreate {
	pac.mutation.SetID(u)
	return pac
}

// Mutation returns the PersonalAccountMutation object of the builder.
func (pac *PersonalAccountCreate) Mutation() *PersonalAccountMutation {
	return pac.mutation
}

// Save creates the PersonalAccount in the database.
func (pac *PersonalAccountCreate) Save(ctx context.Context) (*PersonalAccount, error) {
	pac.defaults()
	return withHooks(ctx, pac.sqlSave, pac.mutation, pac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pac *PersonalAccountCreate) SaveX(ctx context.Context) *PersonalAccount {
	v, err := pac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pac *PersonalAccountCreate) Exec(ctx context.Context) error {
	_, err := pac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pac *PersonalAccountCreate) ExecX(ctx context.Context) {
	if err := pac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pac *PersonalAccountCreate) defaults() {
	if _, ok := pac.mutation.CreatedAt(); !ok {
		v := personalaccount.DefaultCreatedAt()
		pac.mutation.SetCreatedAt(v)
	}
	if _, ok := pac.mutation.UpdatedAt(); !ok {
		v := personalaccount.DefaultUpdatedAt()
		pac.mutation.SetUpdatedAt(v)
	}
	if _, ok := pac.mutation.Balance(); !ok {
		v := personalaccount.DefaultBalance
		pac.mutation.SetBalance(v)
	}
	if _, ok := pac.mutation.Interest(); !ok {
		v := personalaccount.DefaultInterest
		pac.mutation.SetInterest(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pac *PersonalAccountCreate) check() error {
	if _, ok := pac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PersonalAccount.created_at"`)}
	}
	if _, ok := pac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PersonalAccount.updated_at"`)}
	}
	if _, ok := pac.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "PersonalAccount.account_id"`)}
	}
	if v, ok := pac.mutation.AccountID(); ok {
		if err := personalaccount.AccountIDValidator(v); err != nil {
			return &ValidationError{Name: "account_id", err: fmt.Errorf(`ent: validator failed for field "PersonalAccount.account_id": %w`, err)}
		}
	}
	if _, ok := pac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PersonalAccount.type"`)}
	}
	if v, ok := pac.mutation.GetType(); ok {
		if err := personalaccount.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "PersonalAccount.type": %w`, err)}
		}
	}
	if _, ok := pac.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "PersonalAccount.balance"`)}
	}
	if _, ok := pac.mutation.Interest(); !ok {
		return &ValidationError{Name: "interest", err: errors.New(`ent: missing required field "PersonalAccount.interest"`)}
	}
	return nil
}

func (pac *PersonalAccountCreate) sqlSave(ctx context.Context) (*PersonalAccount, error) {
	if err := pac.check(); err != nil {
		return nil, err
	}
	_node, _spec := pac.createSpec()
	if err := sqlgraph.CreateNode(ctx, pac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	pac.mutation.id = &_node.ID
	pac.mutation.done = true
	return _node, nil
}

func (pac *PersonalAccountCreate) createSpec() (*PersonalAccount, *sqlgraph.CreateSpec) {
	var (
		_node = &PersonalAccount{config: pac.config}
		_spec = sqlgraph.NewCreateSpec(personalaccount.Table, sqlgraph.NewFieldSpec(personalaccount.FieldID, field.TypeUint64))
	)
	if id, ok := pac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pac.mutation.CreatedAt(); ok {
		_spec.SetField(personalaccount.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pac.mutation.UpdatedAt(); ok {
		_spec.SetField(personalaccount.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pac.mutation.AccountID(); ok {
		_spec.SetField(personalaccount.FieldAccountID, field.TypeUint64, value)
		_node.AccountID = value
	}
	if value, ok := pac.mutation.GetType(); ok {
		_spec.SetField(personalaccount.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := pac.mutation.Balance(); ok {
		_spec.SetField(personalaccount.FieldBalance, field.TypeFloat32, value)
		_node.Balance = value
	}
	if value, ok := pac.mutation.Interest(); ok {
		_spec.SetField(personalaccount.FieldInterest, field.TypeFloat32, value)
		_node.Interest = value
	}
	return _node, _spec
}

// PersonalAccountCreateBulk is the builder for creating many PersonalAccount entities in bulk.
type PersonalAccountCreateBulk struct {
	config
	err      error
	builders []*PersonalAccountCreate
}

// Save creates the PersonalAccount entities in the database.
func (pacb *PersonalAccountCreateBulk) Save(ctx context.Context) ([]*PersonalAccount, error) {
	if pacb.err != nil {
		return nil, pacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pacb.builders))
	nodes := make([]*PersonalAccount, len(pacb.builders))
	mutators := make([]Mutator, len(pacb.builders))
	for i := range pacb.builders {
		func(i int, root context.Context) {
			builder := pacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonalAccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pacb *PersonalAccountCreateBulk) SaveX(ctx context.Context) []*PersonalAccount {
	v, err := pacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pacb *PersonalAccountCreateBulk) Exec(ctx context.Context) error {
	_, err := pacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pacb *PersonalAccountCreateBulk) ExecX(ctx context.Context) {
	if err := pacb.Exec(ctx); err != nil {
		panic(err)
	}
}
