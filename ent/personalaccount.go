// Code generated by ent, DO NOT EDIT.

package ent

import (
	"Savings/ent/personalaccount"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PersonalAccount is the model entity for the PersonalAccount schema.
type PersonalAccount struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID uint64 `json:"account_id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance float32 `json:"balance,omitempty"`
	// Interest holds the value of the "interest" field.
	Interest float32 `json:"interest,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PersonalAccountQuery when eager-loading is set.
	Edges        PersonalAccountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PersonalAccountEdges holds the relations/edges for other nodes in the graph.
type PersonalAccountEdges struct {
	// Transactions holds the value of the transactions edge.
	Transactions []*PersonalAccountTransaction `json:"transactions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TransactionsOrErr returns the Transactions value or an error if the edge
// was not loaded in eager-loading.
func (e PersonalAccountEdges) TransactionsOrErr() ([]*PersonalAccountTransaction, error) {
	if e.loadedTypes[0] {
		return e.Transactions, nil
	}
	return nil, &NotLoadedError{edge: "transactions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PersonalAccount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case personalaccount.FieldBalance, personalaccount.FieldInterest:
			values[i] = new(sql.NullFloat64)
		case personalaccount.FieldID, personalaccount.FieldAccountID:
			values[i] = new(sql.NullInt64)
		case personalaccount.FieldType:
			values[i] = new(sql.NullString)
		case personalaccount.FieldCreatedAt, personalaccount.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PersonalAccount fields.
func (pa *PersonalAccount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case personalaccount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = uint64(value.Int64)
		case personalaccount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pa.CreatedAt = value.Time
			}
		case personalaccount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pa.UpdatedAt = value.Time
			}
		case personalaccount.FieldAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value.Valid {
				pa.AccountID = uint64(value.Int64)
			}
		case personalaccount.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pa.Type = value.String
			}
		case personalaccount.FieldBalance:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				pa.Balance = float32(value.Float64)
			}
		case personalaccount.FieldInterest:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field interest", values[i])
			} else if value.Valid {
				pa.Interest = float32(value.Float64)
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PersonalAccount.
// This includes values selected through modifiers, order, etc.
func (pa *PersonalAccount) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// QueryTransactions queries the "transactions" edge of the PersonalAccount entity.
func (pa *PersonalAccount) QueryTransactions() *PersonalAccountTransactionQuery {
	return NewPersonalAccountClient(pa.config).QueryTransactions(pa)
}

// Update returns a builder for updating this PersonalAccount.
// Note that you need to call PersonalAccount.Unwrap() before calling this method if this PersonalAccount
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *PersonalAccount) Update() *PersonalAccountUpdateOne {
	return NewPersonalAccountClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the PersonalAccount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *PersonalAccount) Unwrap() *PersonalAccount {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: PersonalAccount is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *PersonalAccount) String() string {
	var builder strings.Builder
	builder.WriteString("PersonalAccount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.AccountID))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(pa.Type)
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", pa.Balance))
	builder.WriteString(", ")
	builder.WriteString("interest=")
	builder.WriteString(fmt.Sprintf("%v", pa.Interest))
	builder.WriteByte(')')
	return builder.String()
}

// PersonalAccounts is a parsable slice of PersonalAccount.
type PersonalAccounts []*PersonalAccount
