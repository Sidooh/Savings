// Code generated by ent, DO NOT EDIT.

package job

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the job type in the database.
	Label = "job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldBatch holds the string denoting the batch field in the database.
	FieldBatch = "batch"
	// FieldLastProcessedID holds the string denoting the last_processed_id field in the database.
	FieldLastProcessedID = "last_processed_id"
	// FieldTotalProcessed holds the string denoting the total_processed field in the database.
	FieldTotalProcessed = "total_processed"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// Table holds the table name of the job in the database.
	Table = "jobs"
)

// Columns holds all SQL columns for job fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldDate,
	FieldStatus,
	FieldBatch,
	FieldLastProcessedID,
	FieldTotalProcessed,
	FieldData,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// DefaultBatch holds the default value on creation for the "batch" field.
	DefaultBatch int
	// DefaultLastProcessedID holds the default value on creation for the "last_processed_id" field.
	DefaultLastProcessedID uint64
	// DefaultTotalProcessed holds the default value on creation for the "total_processed" field.
	DefaultTotalProcessed uint
	// DefaultData holds the default value on creation for the "data" field.
	DefaultData map[string]interface{}
)

// OrderOption defines the ordering options for the Job queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByBatch orders the results by the batch field.
func ByBatch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBatch, opts...).ToFunc()
}

// ByLastProcessedID orders the results by the last_processed_id field.
func ByLastProcessedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastProcessedID, opts...).ToFunc()
}

// ByTotalProcessed orders the results by the total_processed field.
func ByTotalProcessed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalProcessed, opts...).ToFunc()
}
