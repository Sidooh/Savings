// Code generated by ent, DO NOT EDIT.

package job

import (
	"Savings/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldName, v))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldDate, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldStatus, v))
}

// Batch applies equality check predicate on the "batch" field. It's identical to BatchEQ.
func Batch(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldBatch, v))
}

// LastProcessedID applies equality check predicate on the "last_processed_id" field. It's identical to LastProcessedIDEQ.
func LastProcessedID(v uint64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldLastProcessedID, v))
}

// TotalProcessed applies equality check predicate on the "total_processed" field. It's identical to TotalProcessedEQ.
func TotalProcessed(v uint) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldTotalProcessed, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldName, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldDate, v))
}

// DateContains applies the Contains predicate on the "date" field.
func DateContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldDate, v))
}

// DateHasPrefix applies the HasPrefix predicate on the "date" field.
func DateHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldDate, v))
}

// DateHasSuffix applies the HasSuffix predicate on the "date" field.
func DateHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldDate, v))
}

// DateEqualFold applies the EqualFold predicate on the "date" field.
func DateEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldDate, v))
}

// DateContainsFold applies the ContainsFold predicate on the "date" field.
func DateContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldDate, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldStatus, v))
}

// BatchEQ applies the EQ predicate on the "batch" field.
func BatchEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldBatch, v))
}

// BatchNEQ applies the NEQ predicate on the "batch" field.
func BatchNEQ(v int) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldBatch, v))
}

// BatchIn applies the In predicate on the "batch" field.
func BatchIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldBatch, vs...))
}

// BatchNotIn applies the NotIn predicate on the "batch" field.
func BatchNotIn(vs ...int) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldBatch, vs...))
}

// BatchGT applies the GT predicate on the "batch" field.
func BatchGT(v int) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldBatch, v))
}

// BatchGTE applies the GTE predicate on the "batch" field.
func BatchGTE(v int) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldBatch, v))
}

// BatchLT applies the LT predicate on the "batch" field.
func BatchLT(v int) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldBatch, v))
}

// BatchLTE applies the LTE predicate on the "batch" field.
func BatchLTE(v int) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldBatch, v))
}

// LastProcessedIDEQ applies the EQ predicate on the "last_processed_id" field.
func LastProcessedIDEQ(v uint64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldLastProcessedID, v))
}

// LastProcessedIDNEQ applies the NEQ predicate on the "last_processed_id" field.
func LastProcessedIDNEQ(v uint64) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldLastProcessedID, v))
}

// LastProcessedIDIn applies the In predicate on the "last_processed_id" field.
func LastProcessedIDIn(vs ...uint64) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldLastProcessedID, vs...))
}

// LastProcessedIDNotIn applies the NotIn predicate on the "last_processed_id" field.
func LastProcessedIDNotIn(vs ...uint64) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldLastProcessedID, vs...))
}

// LastProcessedIDGT applies the GT predicate on the "last_processed_id" field.
func LastProcessedIDGT(v uint64) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldLastProcessedID, v))
}

// LastProcessedIDGTE applies the GTE predicate on the "last_processed_id" field.
func LastProcessedIDGTE(v uint64) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldLastProcessedID, v))
}

// LastProcessedIDLT applies the LT predicate on the "last_processed_id" field.
func LastProcessedIDLT(v uint64) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldLastProcessedID, v))
}

// LastProcessedIDLTE applies the LTE predicate on the "last_processed_id" field.
func LastProcessedIDLTE(v uint64) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldLastProcessedID, v))
}

// TotalProcessedEQ applies the EQ predicate on the "total_processed" field.
func TotalProcessedEQ(v uint) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldTotalProcessed, v))
}

// TotalProcessedNEQ applies the NEQ predicate on the "total_processed" field.
func TotalProcessedNEQ(v uint) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldTotalProcessed, v))
}

// TotalProcessedIn applies the In predicate on the "total_processed" field.
func TotalProcessedIn(vs ...uint) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldTotalProcessed, vs...))
}

// TotalProcessedNotIn applies the NotIn predicate on the "total_processed" field.
func TotalProcessedNotIn(vs ...uint) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldTotalProcessed, vs...))
}

// TotalProcessedGT applies the GT predicate on the "total_processed" field.
func TotalProcessedGT(v uint) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldTotalProcessed, v))
}

// TotalProcessedGTE applies the GTE predicate on the "total_processed" field.
func TotalProcessedGTE(v uint) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldTotalProcessed, v))
}

// TotalProcessedLT applies the LT predicate on the "total_processed" field.
func TotalProcessedLT(v uint) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldTotalProcessed, v))
}

// TotalProcessedLTE applies the LTE predicate on the "total_processed" field.
func TotalProcessedLTE(v uint) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldTotalProcessed, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Job) predicate.Job {
	return predicate.Job(sql.NotPredicates(p))
}
